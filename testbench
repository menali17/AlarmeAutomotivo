library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity tb_alarme_automotivo is
end tb_alarme_automotivo;

architecture Testbench of tb_alarme_automotivo is

    -- Sinais de estímulo
    signal porta     : STD_LOGIC := '1';  -- Inicialmente fechada (nível alto)
    signal ignicao   : STD_LOGIC := '1';  -- Inicialmente desligada (nível alto)
    signal farol     : STD_LOGIC := '1';  -- Inicialmente desligado (nível alto)
    signal alarmeSom : STD_LOGIC;

begin

    -- Instância do DUT
    DUT: entity work.alarme_automotivo
        port map (
            porta     => porta,
            ignicao   => ignicao,
            farol     => farol,
            alarmeSom => alarmeSom
        );

    -- Processo de estímulos: cada teste representa uma situação física real
    stim_proc: process
    begin
        -- Teste 1: Farol ligado e ignição desligada => Deve disparar alarme
        porta   <= '1';  -- Porta fechada
        ignicao <= '1';  -- Ignicao desligada
        farol   <= '0';  -- Farol ligado
        wait for 10 ns;

        -- Teste 2: Porta aberta e ignição ligada => Deve disparar alarme
        porta   <= '0';  -- Porta aberta
        ignicao <= '0';  -- Ignição ligada
        farol   <= '1';  -- Farol desligado
        wait for 10 ns;

        -- Teste 3: Porta fechada e ignição desligada e farol desligado => Não deve ter alarme
        porta   <= '1';  -- Porta fechada
        ignicao <= '1';  -- Ignição desligada
        farol   <= '1';  -- Farol desligado
        wait for 10 ns;

        -- Teste 4: Porta aberta e ignição desligada e farol desligado => Não deve ter alarme
        porta   <= '0';  -- Porta aberta
        ignicao <= '1';  -- Ignição desligada
        farol   <= '1';  -- Farol desligado
        wait for 10 ns;

        -- Teste 5: Porta fechada e ignição ligada e farol ligado => Não deve ter alarme
        porta   <= '1';
        ignicao <= '0';
        farol   <= '0';
        wait for 10 ns;

        wait;
    end process;

end Testbench;
