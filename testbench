library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity tb_alarme is
end tb_alarme;

architecture behavior of tb_alarme is

    -- Componente a ser testado
    component alarme
        Port (
            porta     : in STD_LOGIC;
            ignicao   : in STD_LOGIC;
            farol     : in STD_LOGIC;
            alarmeSom : out STD_LOGIC
        );
    end component;

    -- Sinais para conectar ao DUT
    signal porta, ignicao, farol : STD_LOGIC := '1';  -- Inicializa em nível alto (estado inativo)
    signal alarmeSom : STD_LOGIC;

begin

    -- Instância do dispositivo sob teste (DUT)
    uut: alarme
        port map (
            porta => porta,
            ignicao => ignicao,
            farol => farol,
            alarmeSom => alarmeSom
        );

    -- Processo de estímulo
    stim_proc: process
    begin
        -- Estado inicial: tudo desligado
        porta <= '1'; ignicao <= '1'; farol <= '1';
        wait for 10 ns;

        -- Condição 1: Farol ligado + ignição desligada → Alarme deve ligar
        farol <= '0'; ignicao <= '1'; porta <= '1';
        wait for 10 ns;

        -- Condição 2: Porta aberta + ignição ligada → Alarme deve ligar
        farol <= '1'; ignicao <= '0'; porta <= '0';
        wait for 10 ns;

        -- Condição 3: Porta aberta + ignição desligada → Sem alarme
        farol <= '1'; ignicao <= '1'; porta <= '0';
        wait for 10 ns;

        -- Condição 4: Farol ligado + ignição ligada → Sem alarme
        farol <= '0'; ignicao <= '0'; porta <= '1';
        wait for 10 ns;

        -- Condição 5: Todas as entradas ativas → Deve ter alarme
        farol <= '0'; ignicao <= '0'; porta <= '0';
        wait for 10 ns;

        -- Estado final: tudo desligado
        porta <= '1'; ignicao <= '1'; farol <= '1';
        wait for 10 ns;

        wait;
    end process;

end behavior;
